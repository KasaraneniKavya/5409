AWSTemplateFormatVersion: 2010-09-09
Description: Group 42 - Cloud Formation Template
Parameters:
  KeyName:
    Description: Key Pair for EC2
    Type: "AWS::EC2::KeyPair::KeyName"
  BucketName:
    Default: csci5409-group42
    Type: String
  lambdaRoleArn:
    Default: "arn:aws:iam::992692235453:role/LabRole"
    Type: String
  G42PoolName:
    Type: String
    Default: G42Pool
  G42PoolClientName:
    Type: String
    Default: G42PoolClient
  G42PoolDomainName:
    Type: String
    Default: grou42-dal-cog
  G42SecretsID:
    Type: String
    Default: g42cogsecrets
  S3BucketEB:
    Type: String
    Default: group42-eb
  S3BucketZIP:
    Type: String
    Default: server.zip
Resources:
  #------------------------------Cognito------------------------------------------------
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${G42PoolName}
      AutoVerifiedAttributes:
        - email
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: False
      EmailConfiguration:
        EmailSendingAccount: "COGNITO_DEFAULT"
      VerificationMessageTemplate:
        DefaultEmailOption: "CONFIRM_WITH_LINK"
      EmailVerificationSubject: "Your verification link for registering on Dal Extracters is"
      MfaConfiguration: "OFF"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: True
          RequireNumbers: True
          RequireSymbols: True
          RequireUppercase: True
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: username
          AttributeDataType: String
          Mutable: true
          Required: false
      UsernameAttributes: [email]
      UsernameConfiguration:
        CaseSensitive: False
      UserPoolAddOns:
        AdvancedSecurityMode: "OFF"
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${G42PoolClientName}
      GenerateSecret: false
      PreventUserExistenceErrors: "ENABLED"
      UserPoolId: !Ref UserPool
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${G42PoolDomainName}
      UserPoolId: !Ref UserPool
  SecretsManager:
    Type: "AWS::SecretsManager::Secret"
    DependsOn:
      - UserPool
      - UserPoolClient
    Properties:
      Name: !Sub ${G42SecretsID}
      SecretString:
        "Fn::Join":
          - ""
          - - '{"USER_POOL_ID":"'
            - Ref: UserPool
            - '","USER_POOL_CLIENT_ID":"'
            - Ref: UserPoolClient
            - '"}'
  #------------------------------Cognito------------------------------------------------
  #------------------------------Network------------------------------------------------
  G42VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: VPC for Group42 Instances

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref G42VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: !Ref G42VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet A

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      VpcId: !Ref G42VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet B

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref G42VPC
      Tags:
        - Key: Name
          Value: Route Table for G42

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnetA

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "g42-security-group"
      GroupDescription: "Security Group for G42 Instances"
      VpcId: !Ref G42VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
      Tags: [{ "Key": "Name", "Value": "group42-dal-sg-cf" }]
  #------------------------------Network------------------------------------------------

  # ------------------------Elastic BeanStalk-------------------------------------------
  Server:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      Description: AWS Elastic Beanstalk Sample Application
  ServerVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName:
        Ref: Server
      Description: AWS ElasticBeanstalk Sample Application Version
      SourceBundle:
        S3Bucket: !Sub ${S3BucketEB}
        S3Key: !Sub ${S3BucketZIP}
  BackendConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName:
        Ref: Server
      Description: AWS ElasticBeanstalk Configuration Template
      OptionSettings:
        - Namespace: aws:autoscaling:asg
          OptionName: MinSize
          Value: "2"
        - Namespace: aws:autoscaling:asg
          OptionName: MaxSize
          Value: "6"
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: EnvironmentType
          Value: LoadBalanced
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: DB_ENV
          Value: production
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value:
            Ref: MyInstanceProfile
      SolutionStackName: 64bit Amazon Linux 2 v5.5.4 running Node.js 12
  BackendEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName:
        Ref: Server
      Description: Backend application on AWS Beanstalk
      TemplateName:
        Ref: BackendConfigurationTemplate
      VersionLabel:
        Ref: ServerVersion
  MyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - LabRole
  # ------------------------Elastic BeanStalk------------------------------------------
  # ------------------------EC2 Client-------------------------------------------------
  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref PublicSubnetA
      AvailabilityZone: us-east-1a
      ImageId: ami-0022f774911c1d690
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install git -y
          mkdir /home/ec2-user/cloud
          cd /home/ec2-user/cloud
          git clone https://callmehetch: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@github.com/callmehetch/group42-dal-client.git
          cd /home/ec2-user/cloud/group42-dal-client
          yum install -y gcc-c++ make
          yum install curl -y
          curl -sL https://rpm.nodesource.com/setup_16.x | sudo -E bash -
          sudo yum install -y nodejs
          sudo yum install npm
          sudo npm i
          screen
          sudo npm start --host=0.0.0.0 --port=80
      Tags: [{ "Key": "Name", "Value": "group42-dal-ec2-cf-a" }]

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref PublicSubnetB
      AvailabilityZone: us-east-1b
      ImageId: ami-0022f774911c1d690
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install git -y
          mkdir /home/ec2-user/cloud
          cd /home/ec2-user/cloud
          git clone https://callmehetch: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@github.com/callmehetch/group42-dal-client.git
          cd /home/ec2-user/cloud/group42-dal-client
          yum install -y gcc-c++ make
          yum install curl -y
          curl -sL https://rpm.nodesource.com/setup_16.x | sudo -E bash -
          sudo yum install -y nodejs
          sudo yum install npm
          sudo npm i
          screen
          sudo npm start --host=0.0.0.0 --port=80
      Tags: [{ "Key": "Name", "Value": "group42-dal-ec2-cf-b" }]

  # G42AutoScalingGroupConfiguration:
  #   Type: AWS::AutoScaling::LaunchConfiguration
  #   Properties:
  #     AssociatePublicIpAddress: false
  #     ImageId: ami-0022f774911c1d690
  #     InstanceType: t2.micro
  #     SecurityGroups: [ !Ref EC2SecurityGroup ]
  #     KeyName: !Ref KeyName
  #     UserData:
  #       Fn::Base64: !Sub |
  #         #!/bin/bash
  #         sudo yum update -y
  #         sudo yum install git -y
  #         mkdir /home/ec2-user/cloud
  #         cd /home/ec2-user/cloud
  #         git clone https://callmehetch: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@github.com/callmehetch/group42-dal-client.git
  #         cd /home/ec2-user/cloud/group42-dal-client
  #         yum install -y gcc-c++ make
  #         yum install curl -y
  #         curl -sL https://rpm.nodesource.com/setup_16.x | sudo -E bash -
  #         sudo yum install -y nodejs
  #         sudo yum install npm
  #         sudo npm i
  #         screen
  #         sudo npm start --host=0.0.0.0 --port=80

  # G42AutoScalingGroup:
  #   Type: AWS::AutoScaling::AutoScalingGroup
  #   Properties:
  #     AutoScalingGroupName: g42-autoscaling-group-cf-2
  #     AvailabilityZones: [us-east-1b, us-east-1a]
  #     DesiredCapacity: 2
  #     LaunchConfigurationName: !Ref G42AutoScalingGroupConfiguration
  #     MaxSize: 3
  #     MinSize: 2

  # Security Group
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref G42VPC
      GroupDescription: ELB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Load Balancer
  LoadBalancerforEC2:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Instances:
        - !Ref EC2Instance1
        - !Ref EC2Instance2
      Listeners:
        - LoadBalancerPort: "80"
          InstancePort: "80"
          Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: "3"
        UnhealthyThreshold: "5"
        Interval: "30"
        Timeout: "5"
      SecurityGroups:
        - !GetAtt ELBSecurityGroup.GroupId
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB

  G42ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref EC2Instance1
      Tags:
        - Key: Name
          Value: Elatic IP for G42 Instances
  # ------------------------EC2 Client-------------------------------------------------
  #-----------------------S3 & Lambda with DynamoDB------------------------------------
  imageBucket:
    DependsOn: lambdaPermission
    Properties:
      BucketName: !Sub "${BucketName}"
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !GetAtt textExtraction.Arn
    Type: "AWS::S3::Bucket"
  lambdaPermission:
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt textExtraction.Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::${BucketName}"
    Type: "AWS::Lambda::Permission"
  textExtraction:
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3

          def lambda_handler(event, context):

              print(event)
              bucket = event["Records"][0]["s3"]["bucket"]["name"]
              key = event["Records"][0]["s3"]["object"]["key"]
                  
              try:
                  #reference for using textract: https://docs.aws.amazon.com/textract/latest/dg/lambda.html
                  textractClient = boto3.client('textract')
                  response = textractClient.detect_document_text(Document={'S3Object': {'Bucket': bucket, 'Name': key}})
                  blocks = response['Blocks']
                  print(blocks)
                  
                  #Get lines of text
                  lines = []
                  for block in blocks:
                      if block["BlockType"] == "LINE":
                          lines.append(block["Text"])
                      
                  content = "\n".join(lines)
                  print(content)
                  if content:
                      tableName = key.split("/")[0]
                      id = key.split("/")[1]
                      
                      #reference for using dynamodb update: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#DynamoDB.Client.update_item
                      dynamodb = boto3.resource('dynamodb')
                      response = dynamodb.Table(tableName).put_item(Item={"id": id, "text": content})
                      print(response)
                  else:
                      print("no text in ima")
                      delete(bucket, key);
                  
              except Exception as e:
                  print(e)
                  delete(bucket, key)
                  
          def delete(bucket, key):
              #reference for using s3 delete object: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.delete_object
              s3Client = boto3.client('s3')
              s3Client.delete_object(
                  Bucket = bucket,
                  Key = key
              )
              print("image deleted")
      Handler: index.lambda_handler
      Role: !Sub ${lambdaRoleArn}
      Runtime: python3.9
      Timeout: 60
    Type: "AWS::Lambda::Function"
#-----------------------S3 & Lambda with DynamoDB------------------------------------

Outputs:
  ElasticIP:
    Description: "Elastic IP for the Application"
    Value: !Ref G42ElasticIP
