AWSTemplateFormatVersion: 2010-09-09
Parameters: 
  BucketName: 
    Default: csci5409-group42
    Type: String
  lambdaRoleArn:
    Default: 'arn:aws:iam::426166733966:role/LabRole'
    Type: String
Resources: 
  imageBucket: 
    DependsOn: lambdaPermission
    Properties: 
      BucketName: !Sub "${BucketName}"
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      CorsConfiguration: 
        CorsRules: 
          - 
            AllowedHeaders: 
              - "*"
            AllowedMethods: 
              - GET
              - PUT
              - POST
            AllowedOrigins: 
              - "*"
            Id: s3CorsRule
      NotificationConfiguration: 
        LambdaConfigurations: 
          - 
            Event: "s3:ObjectCreated:*"
            Function: !GetAtt textExtraction.Arn
    Type: "AWS::S3::Bucket"
  lambdaPermission: 
    Properties: 
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt textExtraction.Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::${BucketName}"
    Type: "AWS::Lambda::Permission"
  textExtraction: 
    Properties: 
      Code: 
        ZipFile: |
            import json
            import boto3
            
            def lambda_handler(event, context):
            
                try:
                    print(event)
                
                    bucket = event["Records"][0]["s3"]["bucket"]["name"]
                    key = event["Records"][0]["s3"]["object"]["key"]
            
                    textractClient = boto3.client('textract')
                
                    #reference for using textract: https://docs.aws.amazon.com/textract/latest/dg/lambda.html
                    response = textractClient.detect_document_text(Document={'S3Object': {'Bucket': bucket, 'Name': key}})
                    
                    blocks = response['Blocks']
                    
                    print(blocks)
                    
                    #Get lines of text
                    lines = []
                    for block in blocks:
                        if block["BlockType"] == "LINE":
                            lines.append(block["Text"])
                        
                    content = "\n".join(lines)
                    
                    print(content)
            
                    tableName = key.split("/")[0]
                    id = key.split("/")[1]
                    
                    #reference for usiing dynamodb: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#DynamoDB.Client.update_item
                    dynamodb = boto3.resource('dynamodb')
                    response = dynamodb.Table(tableName).put_item(Item={"id": id, "text": content})
                    
                    print(response)
                    
                except Exception as e:
                    print(e)
      Handler: index.lambda_handler
      Role: !Sub ${lambdaRoleArn}
      Runtime: python3.9
      Timeout: 60
    Type: "AWS::Lambda::Function"
